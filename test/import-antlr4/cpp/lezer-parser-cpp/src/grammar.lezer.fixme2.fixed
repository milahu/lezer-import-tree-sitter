// original conflict:
// shift/reduce conflict between
//   unqualifiedId -> · Identifier
// and
//   declSpecifierSeq -> 
// With input:
//    · Identifier …
// Shared origin: declaration -> · functionDefinition
//   via functionDefinition -> · declarator virtualSpecifier+ functionBody
//     via declarator -> · noPointerDeclarator parametersAndQualifiers trailingReturnType
//       via noPointerDeclarator -> · declaratorid attributeSpecifier+
//         via declaratorid -> · idExpression
//           via idExpression -> · unqualifiedId
//             unqualifiedId -> · Identifier
//   via functionDefinition -> · declSpecifierSeq declarator virtualSpecifier+ functionBody
//     declSpecifierSeq -> ·

// minimal conflict:
// shift/reduce conflict between
//   unqualifiedId+ -> · Identifier
// and
//   declSpecifierSeq -> 
// With input:
//    · Identifier …
// Shared origin: @top -> · functionDefinition
//   via functionDefinition -> · unqualifiedId+
//     unqualifiedId+ -> · Identifier
//   via functionDefinition -> · declSpecifierSeq unqualifiedId+
//     declSpecifierSeq -> ·

// minimal conflict verbose:
// solution 1: shift:
//   unqualifiedId+ -> · Identifier
// origin 1:
// @top -> · functionDefinition
//   via functionDefinition -> · unqualifiedId+
//     unqualifiedId+ -> · Identifier
//
// solution 2: reduce:
//   declSpecifierSeq -> 
// origin 2:
// @top -> · functionDefinition
//   via functionDefinition -> · declSpecifierSeq unqualifiedId+
//     declSpecifierSeq -> ·
//
// note:
// "declSpecifierSeq -> "  !=
// "declSpecifierSeq -> ·"
//
// note: solution 2 is empty (was reduced to nothing)
// this means: the previous term "declSpecifierSeq" is optional
//
// -> actual conflict between
//   functionDefinition -> · unqualifiedId+
// and
//   functionDefinition -> · declSpecifierSeq unqualifiedId+
//
// -> conflict.term should be "unqualifiedId+"
// but lezer returns the inner term in unqualifiedId:
// conflict.term = "Identifier"

// TODO:
// 1. find shared origin: functionDefinition
// 2. find the constant term "unqualifiedId+"
// 3. insert marker before the constant term = after the optional term

// conflict.solutions[0].rule # "unqualifiedId+ -> · Identifier"
// conflict.solutions[0].rule.name.name = "unqualifiedId+"
// conflict.solutions[0].pos = 0
// conflict.solutions[0].via
// conflict.solutions[0].via.rule # "functionDefinition -> · unqualifiedId+"
// conflict.solutions[0].via.rule.name.name = "functionDefinition"
// conflict.solutions[0].via.via.rule # "@top -> · functionDefinition"
// conflict.solutions[0].via.via.rule.name.name = "declaration"

@precedence {
  expected_solution_1 @left,
  expected_solution_2,
  prec1 @left
}

@top declaration {
  functionDefinition
}

// FIXME fix this rule: add marker before "unqualifiedId+"
functionDefinition {
  declSpecifierSeq? !prec1 unqualifiedId+
  //declSpecifierSeq? !expected_solution_1 unqualifiedId+
  //declSpecifierSeq? !expected_solution_2 unqualifiedId+
  //declSpecifierSeq? ~expected_solution_3 unqualifiedId+
}

declSpecifierSeq {
  declSpecifier?
}

unqualifiedId {
  //~not_working Identifier
  Identifier
}

declSpecifier {
  "y"
}

@tokens {
  Identifier {
    "x"
  }
}
